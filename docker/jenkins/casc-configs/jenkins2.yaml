jenkins:
      systemMessage: |
        This Jenkins is 100% configured and managed 'as code'.
        Config is now mostly handled by the 'Jenkins Configuration as Code' (JCasC) plugin.
        JCasC config can be found in the jenkins.yaml file in the $JENKINS_HOME/casc_configs/ folder.

        Please only do a changes in JCasC config.
      agentProtocols:
      - "JNLP4-connect"
      - "Ping"
      authorizationStrategy:
        roleBased:
          roles:
            global:
              - name: "Admin"
                description: "Jenkins administrators"
                permissions:
                  - "Overall/Administer"
                assignments:
                  - "server@tiket.com"
                  - "kalby.imanie@tiket.com"
                  - "gonewaje.gonewaje@tiket.com"
                  - "andre.manurung@tiket.com"
                  - "yuhendrik.yuhendrik@tiket.com"
                  - "husnur.syafni@tiket.com"
                  - "bahtiar.widayanto@tiket.com"
                  - "ravindra.kumar@tiket.com"
                  - "areeb.ali@tiket.com"
                  - "adhi.prasetia@tiket.com"
                  - "ahmad.herdiansyah@tiket.com"
                  - "sentot.wibowo@tiket.com"
                  - "fauzi.firdaus@tiket.com"
                  - "ginanjar.rahmansyah@tiket.com"
                  - "mohit.kumar@tiket.com"
                  - "edho.julio@tiket.com"
                  - "mezi.apronny@tiket.com"
                  - "lutfi.tanjung@tiket.com"
                  - "vikas.mudrist@tiket.com"
                  - "saurabh.verma@tiket.com"
                  - "amal.misra@tiket.com"
                  - "ridwan.susilo@tiket.com"
                  - "naveen.verma@tiket.com"
                  - "pankaj.kumar@tiket.com"
                  - "ardityo.mulawarman@tiket.com"
                  - "acep.saepudin@tiket.com"
                  - "sra.wahyudi@tiket.com"
                  - "muhammad.jalaluddin@tiket.com"
                  - "keshav.thakur@tiket.com"
                  - "shalender.singh@tiket.com"
                  - "varunaditya.jadwal@tiket.com"
                  - "ramveer.singh@tiket.com"
                  - "yohansen.fernando@tiket.com"
                  - "ardika.saputro@tiket.com"
                  - "sahil.narang@tiket.com"
              - name: "Developer"
                description: "Developer"
                permissions:
                  - "Job/Read"
                  - "Job/Build"
                  - "Job/Cancel"
                  - "View/Read"
                  - "Agent/Build"
                  - "Credentials/View"
                  - "Overall/Read"
                assignments:
                  - "authenticated"
                  - "william.limianto@tiket.com"
                  - "dennis.ertandy@tiket.com"
                  - "nofaldi.atmam@tiket.com"
                  - "natalinus.wahono@tiket.com"
                  - "miftahun.najat@tiket.com"
                  - "surya.badal@tiket.com"
                  - "felix.yunianto@tiket.com"
                  - "yulian.yulian@tiket.com"
                  - "yosia.yosia@tiket.com"
                  - "jonathan.elloy@tiket.com"
                  - "melvin.ismanto@tiket.com"
                  - "siti.munawaroh@tiket.com"
                  - "brijesh.gupta@tiket.com"
                  - "muhammad.saddid@tiket.com"
                  - "rezda.fachrezzi@tiket.com"
                  - "riyo.maulana@tiket.com"
                  - "aditya.p@tiket.com"
                  - "juanito.tanjung@tiket.com"
                  - "ambrosius.gunawan@tiket.com"
                  - "taufik.firdaus@tiket.com"

      clouds:
      - kubernetes:
          containerCapStr: "600"
          jenkinsTunnel: "jenkins-agent-svc.jenkins:50000"
          jenkinsUrl: "http://jenkins-master-svc.jenkins:8080"
          maxRequestsPerHostStr: "64"
          name: "kubernetes"
          namespace: "jenkins"
          serverUrl: "https://35.240.150.193"
      crumbIssuer:
        standard:
          excludeClientIPFromCrumb: true
      disableRememberMe: false
      labelString: "master"
      markupFormatter: "plainText"
      mode: NORMAL
      myViewsTabBar: "standard"
      numExecutors: 10
      primaryView:
        all:
          name: "all"
      projectNamingStrategy: "standard"
      quietPeriod: 5
      remotingSecurity:
        enabled: false
      scmCheckoutRetryCount: 3
      securityRealm:
        googleOAuth2:
          clientId: "${google_oauth2_clientId}"
          clientSecret: "${google_oauth2_clientSecret}"
          domain: "tiket.com"
      slaveAgentPort: 50000
      updateCenter:
        sites:
        - id: "default"
          url: "https://updates.jenkins.io/update-center.json"
      views:
      - all:
          name: "all"
      viewsTabBar: "standard"
    security:
      scriptApproval:
        approvedSignatures:
          - method org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper getRawBuild
          - method hudson.model.Actionable getActions
          - method hudson.model.ParametersAction getParameters
          - method hudson.model.ParameterValue getName
          - method hudson.model.ParameterValue getValue
          - method net.sf.json.JSON isEmpty
      apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true
      globalJobDslSecurityConfiguration:
        useScriptSecurity: false
      sSHD:
        port: -1
    tool:
      git:
        installations:
        - home: "git"
          name: "Default"
      sonarRunnerInstallation:
        installations:
        - name: "sonar-scanner"
          properties:
          - installSource:
              installers:
              - sonarRunnerInstaller:
                  id: "4.2.0.1873"
    unclassified:
      location:
        adminAddress: infra@tiket.com
        url: https://dev-k8s-jenkins.ggwp.red
      sonarglobalconfiguration:
        buildWrapperEnabled: true
        installations:
          - name: "tiket-sonar"
            serverUrl: "http://sonar.tiket.com:9000"
            credentialsId: sonarqube-token
          - name: "sonar-tiket"
            serverUrl: "http://sonar.tiket.com:9000"
            credentialsId: sonarqube-token
          - name: "sonar-server-tiket-com"
            serverUrl: "http://sonar-server.tiket.com:9000"
            credentialsId: sonarqube-token
          - name: "Sonar-Tiket-2"
            serverUrl: "http://sonar-server.tiket.com:9000"
            credentialsId: sonarqube-token
      slackNotifier:
        teamDomain: tiket
        tokenCredentialId: slack-token
      jiraglobalconfiguration:
        sites:
        - url: "https://borobudur.atlassian.net/"
          credentialsId: "jira-tiket"
      globalLibraries:
        libraries:
          - name: "imperative-when"
            defaultVersion: "master"
            implicit: true
            retriever:
              modernSCM:
                scm:
                  git:
                    remote: "https://github.com/tiket/imperative-when.git"
                    credentialsId: "github-tiket"
          - name: "file-upload-workaround"
            defaultVersion: "master"
            implicit: true
            retriever:
              modernSCM:
                scm:
                  git:
                    remote: "https://github.com/tiket/jenkinsci-unstashParam-library.git"
                    credentialsId: "github-tiket"
          - name: "tix-dsl"
            defaultVersion: "master"
            implicit: true
            retriever:
              modernSCM:
                scm:
                  git:
                    remote: "https://github.com/tiket/TIX-DSL.git"
                    credentialsId: "github-tiket"
    jobs:
      - script: >
          pipelineJob('TIX-DSL') {
            logRotator {
                numToKeep 10
            }
            triggers {
                githubPush()
            }
            definition {
              cpsScm {
                scm {
                  git {
                    remote {
                      url('https://github.com/tiket/TIX-DSL.git')
                      credentials('github-tiket')
                      scriptPath('Jenkinsfile-k8s.dev')
                    }
                      branch('*/master')
                  }
                }
                lightweight()
              }
            }
          }
      - script: >
          pipelineJob('TIX-DSL-PR') {
            logRotator {
                numToKeep 10
            }
            triggers {
                githubPush()
                cron('0 1 * * 6')
            }
            definition {
              cpsScm {
                scm {
                  git {
                    remote {
                      url('https://github.com/tiket/TIX-DSL.git')
                      credentials('github-tiket')
                      scriptPath('Jenkinsfile-k8s-PR.dev')
                    }
                      branch('*/master')
                  }
                }
                lightweight()
              }
            }
          }
    credentials:
      system:
        domainCredentials:
          - credentials:
            - usernamePassword:
                description: "artifactory-tiket"
                id: "artifactory-tiket"
                password: "${artifactory_password}"
                scope: GLOBAL
                username: "${artifactory_username}"
            - usernamePassword:
                description: "github username and token"
                id: "github-tiket"
                password: "${github_token}"
                scope: GLOBAL
                username: "${github_username}"
            - usernamePassword:
                description: "github username and token for the user infra-mobile"
                id: "github-infra-mobile"
                password: "${github_token_infra_mobile}"
                scope: GLOBAL
                username: "${github_username_infra_mobile}"
            - usernamePassword:
                description: "jira username and token"
                id: "jira-tiket"
                password: "${jira_token}"
                scope: GLOBAL
                username: "${jira_username}"
            - string:
               description: "github token only"
               id: "tiket-git-password"
               scope: GLOBAL
               secret: "${github_token}"
            - string:
               description: "github token for user infra-mobile"
               id: "tiket-git-infra-mobile-password"
               scope: GLOBAL
               secret: "${github_token_infra_mobile}"
            - string:
               description: "Argocd token"
               id: "argocd-token"
               scope: GLOBAL
               secret: "${argocd_token}"
            - string:
               description: "token for sonarQube"
               id: "sonarqube-token"
               scope: GLOBAL
               secret: "${sonarqube_token}"
            - string:
               description: "token for slack"
               id: "slack-token"
               scope: GLOBAL
               secret: "${slack_token}"
            - googleRobotPrivateKey:
                projectId: 'tk-dev-micro'
                serviceAccountConfig:
                  json:
                    secretJsonKey: "${serviceaccount}"
            - usernamePassword:
                description: "github username and token"
                id: "github-tiket-tmp"
                password: "${github_token_tmp}"
                scope: GLOBAL
                username: "${github_username_tmp}"
            - string:
               description: "token for firebase"
               id: "firebase-token"
               scope: GLOBAL
               secret: "${firebase_token}"
            - string:
               description: "token for firebase android team"
               id: "firebase-token-android"
               scope: GLOBAL
               secret: "${firebase_token_android}"
            - usernamePassword:
                description: "credential for mongo development"
                id: "mongo"
                password: "${mongopass}"
                scope: GLOBAL
                username: "${mongouser}"
            - usernamePassword:
                description: "credential for mongo testing"
                id: "mongo_gk"
                password: "${mongopassgk}"
                scope: GLOBAL
                username: "${mongousergk}"
            - usernamePassword:
                description: "credential for mysql development"
                id: "mysql_dev"
                password: "${mysqlpassdev}"
                scope: GLOBAL
                username: "${mysqluserdev}"
            - usernamePassword:
                description: "credential for mysql testing"
                id: "mysql_gk"
                password: "${mysqlpassgk}"
                scope: GLOBAL
                username: "${mysqlusergk}"
            - usernamePassword:
                description: "credential android webhook"
                id: "webhook-android"
                password: "${android_webhook_password}"
                scope: GLOBAL
                username: "${android_webhook_username}"
            - string:
               description: "password for redis DEV"
               id: "redis-password"
               scope: GLOBAL
               secret: "${redispass}"
            - string:
               description: "service account for android"
               id: "serviceaccount-android"
               scope: GLOBAL
               secret: "${serviceaccount_android}"
            - string:
               description: "sonar password for android"
               id: "sonar-password"
               scope: GLOBAL
               secret: "${sonar_password}"
            - string:
               description: "app slack token for apps"
               id: "app-slack-token"
               scope: GLOBAL
               secret: "${app_slack_token}"
            - string:
               description: "service account for android firebase"
               id: "firebase-service-account-android"
               scope: GLOBAL
               secret: "${android_firebase_service_account}"
            - string:
               description: "pxc migration user"
               id: "pxcmysqlmigrationuser"
               scope: GLOBAL
               secret: "${pxcmysqlmigrationuser}"
            - string:
               description: "pxc migration password"
               id: "pxcmysqlmigrationpassword"
               scope: GLOBAL
               secret: "${pxcmysqlmigrationpassword}"
            - string:
               description: "service account for live be"
               id: "serviceaccount-live"
               scope: GLOBAL
               secret: "${serviceaccount_live}"
            - usernamePassword:
                description: "qa mysql username and password"
                id: "qa-mysql-creds"
                password: "${qa_mysql_pass}"
                scope: GLOBAL
                username: "${qa_mysql_user}"
            - usernamePassword:
                description: "browserstack username and password"
                id: "browserstack-creds"
                password: "${browserstack_pass}"
                scope: GLOBAL
                username: "${browserstack_user}"